org: juandatorres
app: serverless-todo-app
service: serverless-todo-app

frameworkVersion: "3"
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-plugin-aws-alerts
  - serverless-plugin-metric
custom:
  tableName: "users-table-${sls:stage}"
  metrics:
    - name: AppLevelMetrics
      pattern: "{ $.statusCode != 200 }"
  alerts:
    stages:
      - dev
    topics:
      alarm:
        topic: ${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: beastar457@gmail.com
    alarms:
      - functionErrors
      - functionThrottles

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    USERS_TABLE: ${self:custom.tableName}
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    tracing: "true" # overrides provider settings (opt out)
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          - "*"
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    tracing: "true" # overrides provider settings (opt out)
    events:
      - http:
          method: post
          path: todos
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
          authorizer: Auth
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutObject
          - dynamodb:PutItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          - "*"

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    tracing: "true" # overrides provider settings (opt out)
    events:
      - http:
          method: patch
          path: todos/{todoId}
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
          cors: true
          authorizer: Auth

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          - "*"
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    tracing: "true" # overrides provider settings (opt out)
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          - "*"
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    tracing: "true" # overrides provider settings (opt out)
    events:
      - http:
          method: post
          path: todos/attachment
          cors: true
          authorizer: Auth

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutObject
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          - "*"

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties: